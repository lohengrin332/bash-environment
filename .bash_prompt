#TEST=1
GIT_PS1_SHOWDIRTYSTATE=1
GIT_PS1_SHOWSTASHSTATE=1
GIT_PS1_SHOWUNTRACKEDFILES=1
GIT_PS1_SHOWCOLORHINTS=1

__git_ps1_colorize_gitstring () {
    if [[ -n "${ZSH_VERSION-}" ]]; then
        local c_red='%F{red}'
        local c_green='%F{green}'
        local c_lblue='%F{blue}'
        local c_clear='%f'
    else
        # Using \[ and \] around colors is necessary to prevent
        # issues with command line editing/browsing/completion!
        local c_red='\[\e[31m\]'
        local c_green='\[\e[32m\]'
        local c_lblue='\[\e[1;34m\]'
        local c_clear='\[\e[0m\]'
    fi
    local bad_color=${RED}
    local ok_color=${GREEN}
    local flags_color=${LTBLUE}

    local branch_color=""
    if [ "$detached" = no ]; then
        branch_color="$ok_color"
    else
        branch_color="$bad_color"
    fi
    c="$branch_color$c"

    z="$c_clear$z"
    if [ "$working" = "*" ]; then
        working="$bad_color$working"
    fi
    if [ -n "$cached" ]; then
        cached="$ok_color$cached"
    fi
    if [ -n "$stash" ]; then
        stash="$flags_color$stash"
    fi
    if [ -n "$untracked" ]; then
        untracked="$bad_color$untracked"
    fi
    r="$c_clear$r"
}

function parse_git_dirty() {
    local repo_info rev_parse_exit_code
    repo_info="$(git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD 2>/dev/null)"
    rev_parse_exit_code=$?

    if [ -z "$repo_info" ]; then
        return
    fi

    local short_sha
    if [ "$rev_parse_exit_code" = "0" ]; then
        short_sha="${repo_info##*$'\n'}"
        repo_info="${repo_info%$'\n'*}"
    fi

    local inside_worktree="${repo_info##*$'\n'}"
    repo_info="${repo_info%$'\n'*}"
    local bare_repo="${repo_info##*$'\n'}"
    repo_info="${repo_info%$'\n'*}"
    local inside_gitdir="${repo_info##*$'\n'}"
    local g="${repo_info%$'\n'*}"

    local working=""
    local cached=""
    local stash=""
    local untracked=""
    local c=""
    local p=""

    if [ "true" = "$inside_gitdir" ]; then
        if [ "true" = "$bare_repo" ]; then
            c="BARE:"
        else
            b="GIT_DIR!"
        fi
    elif [ "true" = "$inside_worktree" ]; then
        if [ -n "${GIT_PS1_SHOWDIRTYSTATE-}" ] &&
           [ "$(git config --bool bash.showDirtyState)" != "false" ]
        then
            git diff --no-ext-diff --quiet --exit-code || working="*"
            if [ -n "$short_sha" ]; then
                git diff-index --cached --quiet HEAD -- || cached="+"
            else
                cached="#"
            fi
        fi
        if [ -n "${GIT_PS1_SHOWSTASHSTATE-}" ] &&
           [ -r "$g/refs/stash" ]; then
            stash="$"
        fi

        if [ -n "${GIT_PS1_SHOWUNTRACKEDFILES-}" ] &&
           [ "$(git config --bool bash.showUntrackedFiles)" != "false" ] &&
           git ls-files --others --exclude-standard --error-unmatch -- '*' >/dev/null 2>/dev/null
        then
            untracked="%${ZSH_VERSION+%}"
        fi
    fi

    local z="${GIT_PS1_STATESEPARATOR-" "}"

    # NO color option unless in PROMPT_COMMAND mode
    if [ -n "${GIT_PS1_SHOWCOLORHINTS-}" ]; then
        __git_ps1_colorize_gitstring
    fi

    echo -n "$working$cached$stash$untracked"
}

function parse_git_branch() {
  BRANCH=$(git branch 2>/dev/null|grep -e '^\*'|sed 's/^\* *//')
  echo "$BRANCH"
}


if tput setaf 1 &> /dev/null; then
  #echo "tput setaf 1"
  BLACK=$(tput setaf 0)
  RED=$(tput setaf 1)
  GREEN=$(tput setaf 2)
  YELLOW=$(tput setaf 3)
  DKBLUE=$(tput setaf 4)
  MAGENTA=$(tput setaf 5)
  LTBLUE=$(tput setaf 6)
  WHITE=$(tput setaf 7)
  BLACK_HILITE=$(tput setab 0)
  RED_HILITE=$(tput setab 1)
  GREEN_HILITE=$(tput setab 2)
  YELLOW_HILITE=$(tput setab 3)
  DKBLUE_HILITE=$(tput setab 4)
  MAGENTA_HILITE=$(tput setab 5)
  LTBLUE_HILITE=$(tput setab 6)
  WHITE_HILITE=$(tput setab 7)
  BOLD=$(tput bold)
  RESET=$(tput sgr0)
else
  #echo "not tput setaf 1"
  BLACK=""
  RED="\e[31m"
  GREEN="\e[32m"
  YELLOW="\e[33m"
  DKBLUE="\e[34m"
  MAGENTA="\e[35m"
  LTBLUE="\e[36m"
  WHITE="\e[37m"
  RED_HILITE="\e[41m"
  GREEN_HILITE="\e[42m"
  YELLOW_HILITE="\e[43m"
  DKBLUE_HILITE="\e[44m"
  MAGENTA_HILITE="\e[45m"
  LTBLUE_HILITE="\e[46m"
  WHITE_HILITE="\e[47m"
  BOLD=""
  RESET="\e[0m"
fi

if [ "$TEST" == '1' ]; then
  echo "${RED}RED${RESET}"
  echo "${GREEN}GREEN${RESET}"
  echo "${YELLOW}YELLOW${RESET}"
  echo "${DKBLUE}DKBLUE${RESET}"
  echo "${MAGENTA}MAGENTA${RESET}"
  echo "${LTBLUE}LTBLUE${RESET}"
  echo "${WHITE}WHITE${RESET}"
  echo "${BOLD}BOLD${RESET}"
  echo "${RESET}RESET${RESET}"

  export PS1="\[${RED}\]RED \[${GREEN}\]GREEN \[${YELLOW}\]YELLOW \[${DKBLUE}\]DKBLUE \[${MAGENTA}\]MAGENTA \[${LTBLUE}\]LTBLUE \[${WHITE}\]WHITE \[${BLACK}\]BLACK \[${DKBLUE_HILITE}\]DKBLUE_HILITE \[${YELLOW_HILITE}\]YELLOW_HILITE \[${BOLD}\]BOLD \[${RESET}\]RESET\n$ "

else
  #export PS1="[\u@\h \W]\$ "
  if [ $HOSTNAME == 'shaftoe' ] \
  || [ $HOSTNAME == 'dlewis-vz-dev-pdc-01.tigerlead.local' ] \
  || [ $HOSTNAME == 'dlewis-vz-dev-01.tigerlead.local' ] \
  || [ $HOSTNAME == 'dlewis-vz-dev-ddc-01.tigerlead.local' ]; then
    HN="\[${MAGENTA}\]\h"
  elif [ $HOSTNAME == 'jd-local-vm' ] || [ $HOSTNAME == 'jd-local-vm.local' ]; then
    HN="\[${BLACK}\]\[${LTBLUE_HILITE}\]\h"
  elif [ $HOSTNAME == 'rpi-mdl-00' ]; then
    HN="\[${BLACK}\]\[${YELLOW_HILITE}\]\h"
  else
    HN="\h"
  fi
  export PS1="\[${GREEN}\]\u@${HN}\[${RESET}\]\[${YELLOW}\]:\[${WHITE}\]\$(parse_git_branch)\$(parse_git_dirty)\[${RESET}\]\[${YELLOW}\]:\w\[${RESET}\]\n\$ \[\033]0;\h:\W\007\]"

fi
